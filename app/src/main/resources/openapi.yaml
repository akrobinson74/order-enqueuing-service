openapi: 3.0.0
info:
  description: "Enumeration of the endpoints the OrderEnqueuingService exposes and the expected data transfer objects"
  title: "OrderEnqueuingService OpenAPI Spec"
  version: "1.0.3"
paths:
  /{platformId}/order:
    post:
      summary: "Create a new Order resource to be enqued for processing"
      operationId: createOrder
      parameters:
      - in: path
        name: platformId
        required: true
        schema:
         type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: CREATED.  Order resource was successfully created
          headers:
            Location:
              description: The URI of the created Order resource
              schema:
                type: string
        '400':
          description: INVALID EQUEST.  POST'd requestBody was not well formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '422':
          description: UNPROCESSABLE_ENTITY.  A field or fields in the requestBody contains an invalid value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /order/{orderId}:
    get:
      summary: "Obtain an Order resource possesses the same orderId in the path parameter"
      operationId: getOrder
      parameters:
      - in: path
        name: orderId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK.  Return the corresponding Order resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: NOT_FOUND.  No Order resource corresponds to ${orderId}
  /{platformId}/order/{orderId}:
    patch:
      summary: "Cancel or Return an OrderItem"
      operationId: changeOrderItem
      parameters:
        - in: path
          name: platformId
          required: true
          schema:
            type: string
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemPatch'
      responses:
        '202':
          description: ACCEPTED.  The update has been applied and successfully propagated
        '404':
          description: NOT_FOUND.  The targeted resource doesn't exists in our DB.
        '500':
          description: ERROR.  The operation resulted in an internal error.
    put:
      summary: "Update the status of an existing Order"
      operationId: putStatus
      parameters:
        - in: path
          name: platformId
          required: true
          schema:
            type: string
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusUpdate'
      responses:
        '202':
          description: ACCEPTED.  The update to status has been accepted and propagated.
        '404':
          description: NOT_FOUND.  The targeted resource doesn't exists in our DB.
        '500':
          description: ERROR.  The operation resulted in an internal error.
  /{platformId}/orders:
    get:
      summary: "Get all orders for the current user"
      operationId: getAllOrders
      parameters:
      - in: path
        name: platformId
        required: true
        schema:
          type: string
      - in: query
        name: batchSize
        required: false
        schema:
          type: string
      - in: query
        name: before
        required: false
        schema:
          type: string
      - in: query
        name: end
        required: false
        schema:
          type: string
      - in: query
        name: limit
        required: false
        schema:
          type: string
      - in: query
        name: skip
        required: false
        schema:
          type: string
      responses:
        '200':
          description: OK.  Return an Array of Order objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersCollection'
        '404':
          description: NOT_FOUND.  The current user has no orders

  /health:
    get:
      summary: Health Check endpoint
      operationId: healthCheck
      responses:
        '200':
          description: Service is OK
        '503':
          description: Service is KO'd
  /metrics:
    get:
      summary: Endpoint for Prometheus metrics
      operationId: metrics
      responses:
        '200':
          description: Get prometheus metrics
components:
  schemas:
    Address:
      type: object
      properties:
        city:
          description: City wherein address is located
          example: Berlin
          type: string
        country:
          description: Country where the given address is located
          example: Germany
          type: string
        street:
          description: Name of the street belonging to address
          example: Am Studio
          type: string
        streetNumber:
          description: House/Street number of the address
          example: 2a
          type: string
        zipCode:
          description: Postal code of the address
          example: 12489
          type: string

    Contact:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        email:
          description: Email address of the contact
          example: michael.mente@phizzard.com
        firstName:
          description: First name of the contact
          example: Michael
          type: string
        lastName:
          description: Last name of the contact
          example: Mente
          type: string
        phoneNumber:
          description: Phone number at which to reach the contact
          example: '+49123456789910'
          type: string

    ErrorBody:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string

    Order:
      type: object
      properties:
        approvalCode:
          type: string
          example: "I really approve of you"
        buyerContact:
          $ref: '#/components/schemas/Contact'
        deliveryContact:
          $ref: '#/components/schemas/Contact'
        invoiceContact:
          $ref: '#/components/schemas/Contact'
        orderItems:
          items:
            $ref: '#/components/schemas/OrderItem'
          type: array
        status:
          type: string
          enum: [PROCESSING, CANCELED, COMPLETED]
        store:
          $ref: '#/components/schemas/StoreDetails'
        transactionDate:
          type: string
          format: ISO Date
          example: "2019-05-02T08:05:23.653Z"

    OrderItem:
      type: object
      properties:
        articleDescription:
          description: Description of the article in question
          example: "Ladies Kjus T-shirt"
          type: string
        currency:
          description: ISO currency code for currency used in the purchase of this item
          example: "CHF"
          type: string
        grossPrice:
          example: 64.07
          oneOf:
            - type: number
            - type: string
        gtin:
          description: A unique identifier for this product
          type: string
          example: "07612997688944"
        netPrice:
          example: 69.0
          oneOf:
            - type: number
            - type: string
        quantity:
          description: The amount of the particular productVariant ordered
          example: 2
          format: int32
          type: integer
        supplierName:
          description: The manufacturer and/or vendor of this product; used to split and group orderItems together
          example: kjus
          type: string

    OrderItemPatch:
      type: object
      properties:
        action:
          type: string
          enum: [CANCEL, RETURN]
        item:
          $ref: '#/components/schemas/OrderItem'
        itemIndex:
          type: integer
      required:
        - action


    OrdersCollection:
      type: array
      items:
        $ref: '#/components/schemas/Order'
        minItems: 1

    OrderStatus:
      type: string
      enum:
        - APPROVED
        - COMPLETED
        - ERROR
        - INITIAL
        - MP_CANCELLATION
        - OPEN
        - PROCESSING

    StatusUpdate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/OrderStatus'

    StoreContact:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        email:
          description: Email address of the contact
          example: michael.mente@phizzard.com
        firstName:
          description: First name of the contact
          example: Michael
          type: string
        lastName:
          description: Last name of the contact
          example: Mente
          type: string
        phoneNumber:
          description: Phone number at which to reach the contact
          example: '+49123456789910'
          type: string

    StoreDetails:
      type: object
      properties:
        contactInfo:
          $ref: '#/components/schemas/StoreContact'
        gln:
          description: GLN that identifies the store
          example: "4399902214995"
          type: string
        storeId:
          description: a non-GLN identifier for the store
          example: "1025"
        name:
          description: name of the store
          example: "Mondo Sport"
          type: string
